#!/usr/bin/env node

const program = require('commander')
const { addCommonOptions } = require('./common')
const { getClient } = require('../src/utils/clients')
const { assets, unitToCurrency, currencyToUnit } = require('@liquality/cryptoassets')
const config = require('../src/config')

addCommonOptions(program)

async function getBalance(asset) {
  const client = await getClient(asset)
  const addresses = await client.wallet.getUsedAddresses()
  const balance = await client.chain.getBalance(addresses)
  const balanceInCurrency = unitToCurrency(assets[asset], balance).toNumber()
  const code = assets[asset].code

  return {
    balanceInCurrency,
    code
  }
}

program.command('balances').action(async () => {
  const data = []
  const tickers = Object.keys(config.assets)

  for (let i = 0; i < tickers.length; i++) {
    data.push(await getBalance(tickers[i]))
  }

  console.log(data)
})

program.command('balance <asset>').action(async (asset) => {
  const balance = await getBalance(asset)

  console.log(balance.balanceInCurrency + ' ' + balance.code)
})

program.command('getnewaddress <asset>').action(async (asset) => {
  const client = await getClient(asset)
  const address = await client.wallet.getUnusedAddress()

  console.log(address)
})

program.command('sendtoaddress <asset> <address> <amount>').action(async (asset, address, amount) => {
  const amountInUnit = currencyToUnit(assets[asset], amount)
  const client = await getClient(asset)
  const tx = await client.chain.sendTransaction({ to: address, value: amountInUnit })

  console.log(tx)
})

program.parse(process.argv)
